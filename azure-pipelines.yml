trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

stages:

# 1) Build Stage: genera /dist y lo empaqueta en ZIP
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Install & Build'
    steps:
      - checkout: self

      - task: NodeTool@0
        inputs:
          versionSpec: '20.x'
        displayName: 'Use Node.js 20.x'

      - script: |
          npm install
          npm run build --if-present
        displayName: 'npm install & build'

      - task: ArchiveFiles@2
        displayName: 'Zip de assets est√°ticos'
        inputs:
          rootFolderOrFile: '$(Build.SourcesDirectory)/dist'
          includeRootFolder: false
          archiveType: zip
          archiveFile: '$(Build.ArtifactStagingDirectory)/release.zip'
          replaceExistingArchive: true

      - publish: $(Build.ArtifactStagingDirectory)/release.zip
        artifact: drop

# 2) Deploy Stage: descarga el drop y lo sube con Azure CLI (sin Oryx)
- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Deploy
    displayName: 'Deploy est√°tico con Azure CLI'
    steps:
      # descarga el pipeline artifact ‚Äúdrop‚Äù
      - download: current
        artifact: drop

      # (opcional) depura para ver d√≥nde qued√≥ el ZIP
      - script: |
          echo "Pipeline.Workspace = $(Pipeline.Workspace)"
          ls -R "$(Pipeline.Workspace)/drop"
        displayName: 'üîç Debug: listar drop'

      # deploy usando la ruta correcta
      - task: AzureCLI@2
        displayName: 'Deploy est√°tico con CLI'
        inputs:
          azureSubscription: 'SC-CasinoDemo'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az webapp deployment source config-zip \
              --resource-group REACT-WEU-DEV \
              --name reactcasinodemo \
              --src $(Pipeline.Workspace)/drop/release.zip
